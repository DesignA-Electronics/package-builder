#!/bin/bash

PACKAGE_BUILDER_BASE=$(readlink -f $(dirname $0))

set -e
. ${PACKAGE_BUILDER_BASE}/config

PACKAGES_LIST=$1
DEST=$2
DEVICE_TABLE=${3:-${PACKAGE_BUILDER_BASE}/device_table}

if [ -z "$PACKAGES_LIST" -o -z "$DEST" -o -z "$PACKAGES_LIST" ] ; then
    echo "Usage: $0 packages_list_file output_directory [device_table]"
    exit 1
fi

if [ ! -f "$PACKAGES_LIST" ] ; then
    echo "Package file '$PACKAGES_LIST' does not exist"
    exit 1
fi

if [ -e "$DEST" ] ; then
    echo "Output directory $DEST already exists"
    exit 1
fi

## Helper functions
copy_lib () {
    base=$1
    shift
    for f in $* ; do
        echo -n "."
        cp -a "$TOOLCHAIN_LIBC_DIR"/$base/$f "$DEST"/$base
    done
}

##
# Unpack the .ipk file, extracting the data.tar.gz into the root filesystem
##
install_package() {
    package=$1
    count=`ls ${PACKAGE_DIR}/${package}_*.ipk | wc -l`
    if [ $count -gt 1 ] ; then
        echo "Multiple versions of ${package} in packages dir" >&2
        exit 1
    fi
    FILE=`readlink -f ${PACKAGE_DIR}/${package}_*.ipk`
    #echo $FILE
    if [ ! -f ${FILE} ] ; then
        echo "Cannot find package '${package}'" >&2
        exit 1
    fi
    sh -c "ar p ${FILE} data.tar.gz | tar -xmzC ${DEST} --no-overwrite-dir --delay-directory-restore"
    echo -n "."
}

##
# Turn the one-line entry from the device_table file into an actual
# device/directory/list of devices
##
make_device () {
    device="$DEST"/$1
    type=$2
    mode=$3
    uid=$4
    gid=$5
    major=$6
    minor=$7
    start=$8
    inc=$9
    count=${10}

    dir=`dirname $device`

    if [ -n "$dir" -a ! -d "$dir" ] ; then
        mkdir -p "$dir"
    fi

    if [ "$type" == "d" ] ; then
        mkdir "$device"
    elif [ "$type" == "c" -o "$type" == "b" ] ; then
        if [ "$count" == "-" -o -z "$count" ] ; then
            sudo mknod "$device" $type $major $minor
        else
            i=$start
            pos=$(( $minor ))
            while [ "$i" -le "$count" ] ; do
                sudo mknod "$device$i" $type $major $pos
                pos=$(( $pos + $inc ))
                i=$(( $i + 1 ))
        done
        fi
    elif [ "$type" == "l" ] ; then
        ln -s "$mode" "$device"
    fi
    echo -n "."
}

##
# Make all of the devices in device_table into actual files in $DEST/dev
##
make_devices () {
    FILE=$1
    cat $1 | while read line ; do
        if [ "${line:0:1}" != "#" ] ; then
            make_device $line
        fi
    done
}


# Build directory structure
mkdir -p "$DEST/lib" "$DEST/dev" "$DEST/proc" "$DEST/sys" "$DEST/etc/init.d" "$DEST/var/tmp" "$DEST/home" "$DEST/mnt" "$DEST/var/run" "$DEST/usr/local/bin" "$DEST/usr/lib" "$DEST/lib/modules"

# Copy libraries (ARM only), and only if there is no mention of 'toolchain-libs' in the packages file
# New projects should include the toolchain-libs into their packages listing, this is just
# for compatability with older projects
if [ "${ARCH}" == "arm" ] ; then
    if ! grep -q toolchain-libs $PACKAGES_LIST ; then
        echo -n "  Copying Libraries "
        ln -s /var/tmp "$DEST/tmp"

        # Copy toolchain libraries
        if [ "$USE_UCLIBC" == "1" ] ; then
            copy_lib lib libuClibc-*.so
        else
            copy_lib lib libc-*.so libnss_files-*.so libnss_dns-*.so libthread_db-*.so
        fi
        if [ -f "$TOOLCHAIN_LIBC_DIR"/lib/libstdc++.so ] ; then
            copy_lib lib libstdc++.so*
        elif [ -f "$TOOLCHAIN_LIBC_DIR"/usr/lib/libstdc++.so ] ; then
            copy_lib usr/lib libstdc++.so*
        else
            echo "Unable to find libstdc++" >&2
            exit 1
        fi
        copy_lib lib ld-*.so libm-*.so libcrypt-*.so libresolv-*.so libgcc_s.so.* libpthread-*.so librt-*.so libdl-*.so libnsl-*.so libutil-*.so
        echo
    fi
fi

# Copy default root files
cp -a ${PACKAGE_BUILDER_BASE}/root_files/* "${DEST}/"
# Remove any source control hang-over control files
find "${DEST}" -depth -name ".svn" -exec rm -rf {} \;

# Install packages
echo -n "  Installing Packages "
cat $PACKAGES_LIST | while read p ; do
    if [ -z "$p" ] ; then
        continue
    fi
    if [ "${p:0:1}" == "#" ] ; then
        continue
    fi
    install_package $p
done
wait

echo


# Build device files
echo -n "  Building Device Files "
make_devices ${DEVICE_TABLE}
echo

# Wait for any background stuff to finish
wait

if [ "$STRIP_ROOTFS" == "1" ] ; then
    echo -n "  Stripping binaries..."
    FILES="${DEST}/lib/* ${DEST}/bin/* ${DEST}/usr/lib/* ${DEST}/usr/bin/*"
    for f in $FILES ; do
        if [ -f $f ] ; then
            ${TOOLCHAIN_DIR}/bin/arm-none-linux-gnueabi-strip $f >/dev/null 2>&1 || true
            echo -n "."
        fi
    done
    echo
fi


# Newer ldconfigs require a cache file. 
# We create the directory so that it doesn't complain
mkdir -p "${DEST}/var/cache/ldconfig"

# Finalise .so symlinks
/sbin/ldconfig -r `readlink -f "$DEST"`

# Ensure that we have linuxrc in the root
if [ ! -f ${DEST}/linuxrc ]; then
    if [ -f ${DEST}/bin/busybox ]; then
        pushd ${DEST}
        ln -sf bin/busybox linuxrc
        popd
    else
        echo "Warning: No linuxrc file in root dir and can't find /bin/busybox"
    fi
fi

